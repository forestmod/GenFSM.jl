var documenterSearchIndex = {"docs":
[{"location":"StyleGuide_templates.html#Style-guide-and-template-for-BetaML-developers","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"","category":"section"},{"location":"StyleGuide_templates.html#Master-Style-guide","page":"Style guide and template for BetaML developers","title":"Master Style guide","text":"","category":"section"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"The code in GenFSM should follow the official Julia Style Guide.","category":"page"},{"location":"StyleGuide_templates.html#Names-style","page":"Style guide and template for BetaML developers","title":"Names style","text":"","category":"section"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Each file name should start with a capital letter, no spaces allowed (and each file content should start with: \"Part of [GenFSM](https://github.com/forestmod/GenFSM.jl). Licence is MIT.\")\nType names use the so-called \"CamelCase\" convention, where the words are separated by a capital letter rather than _ ,while function names use lower letters only, with words eventually separated (but only when really neeed for readibility) by an _;","category":"page"},{"location":"StyleGuide_templates.html#Docstrings","page":"Style guide and template for BetaML developers","title":"Docstrings","text":"","category":"section"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Please apply the following templates when writing a docstring for GenFSM:","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Functions (add @docs if the function is not on the root module level, like for inner constructors, i.e. @docs \"\"\" foo()x ....\"\"\"):","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"\"\"\"\n    $(TYPEDSIGNATURES)\n\nOne line description\n\n[Further description]\n\n# Parameters:\n\n\n\n# Returns:\n- Elements the funtion need\n\n# Notes:\n- notes\n\n# Example:\n` ` `julia\njulia> [code]\n[output]\n` ` `\n\"\"\"","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Structs","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"\"\"\"\n$(TYPEDEF)\n\nOne line description\n\n[Further description]\n\n# Fields: (if relevant)\n$(TYPEDFIELDS)\n\n# Notes:\n\n# Example:\n` ` `julia\njulia> [code]\n[output]\n` ` `\n\n\"\"\"","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Enums:","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"\"\"\"\n$(TYPEDEF)\n\nOne line description\n\n[Further description]\n\n\n# Notes:\n\n\"\"\"","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Constants","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"\"\"\"\n[4 spaces] [Constant name]\n\nOne line description\n\n[Further description]\n\n\n# Notes:\n\n\"\"\"","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"Modules","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"\"\"\"\n[4 spaces] [Module name]\n\nOne line description\n\nDetailed description on the module objectives, content and organisation\n\n\"\"\"","category":"page"},{"location":"StyleGuide_templates.html#Internal-links","page":"Style guide and template for BetaML developers","title":"Internal links","text":"","category":"section"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"To refer to a documented object: [`NAME`](@ref) or [`NAME`](@ref manual_id). In particular for internal links use [`?NAME`](@ref ?NAME)","category":"page"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"To create an id manually: [Title](@id manual_id)","category":"page"},{"location":"StyleGuide_templates.html#Data-organisation","page":"Style guide and template for BetaML developers","title":"Data organisation","text":"","category":"section"},{"location":"StyleGuide_templates.html","page":"Style guide and template for BetaML developers","title":"Style guide and template for BetaML developers","text":"While some functions provide a dims parameter, most GenFSM algorithms expect the input data layout with observations organised by rows and fields/features by columns.\nWhile some algorithms accept as input DataFrames, the usage of standard arrays is encourages (if the data is passed to the function as dataframe, it may be converted to standard arrays somewhere inside inner loops, leading to great inefficiencies).","category":"page"},{"location":"GenFSM.html#The-GenFSM-Module","page":"GenFSM","title":"The GenFSM Module","text":"","category":"section"},{"location":"GenFSM.html","page":"GenFSM","title":"GenFSM","text":"GenFSM","category":"page"},{"location":"GenFSM.html#GenFSM","page":"GenFSM","title":"GenFSM","text":"GenFSM module\n\nMain module of the GenFSM package\n\n\n\n\n\n","category":"module"},{"location":"GenFSM.html#Module-Index","page":"GenFSM","title":"Module Index","text":"","category":"section"},{"location":"GenFSM.html","page":"GenFSM","title":"GenFSM","text":"Modules = [GenFSM]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"GenFSM.html#Detailed-API","page":"GenFSM","title":"Detailed API","text":"","category":"section"},{"location":"GenFSM.html","page":"GenFSM","title":"GenFSM","text":"Modules = [GenFSM]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"GenFSM.html#GenFSM.runsim","page":"GenFSM","title":"GenFSM.runsim","text":"run(project,scenario;override)\n\nRun a scenario of GenFSM\n\nParameters\n\nproject: project or region name\nscenario: name of the scenario within the project\noverride: a dictionary (keys=>new value) which eventually overrides the settings as specified in the region/scenario (e.g. for output directories)\n\n\n\n\n\n","category":"function"},{"location":"ScenarioLoader.html#The-ScenarioLoader-Module","page":"ScenarioLoader","title":"The ScenarioLoader Module","text":"","category":"section"},{"location":"ScenarioLoader.html","page":"ScenarioLoader","title":"ScenarioLoader","text":"ScenarioLoader","category":"page"},{"location":"ScenarioLoader.html#GenFSM.ScenarioLoader","page":"ScenarioLoader","title":"GenFSM.ScenarioLoader","text":"GenFSM_simrep\n\nSimulation settings repository for GenFSM models.\n\nThis package sole function is load_settings.\n\nThe settings are stored in this repository as yaml files in:\n\n[project]\nscenarios\n[scenario]\n\nWhere the default project and the default scenarios ae both named \"default\".\n\n\n\n\n\n","category":"module"},{"location":"ScenarioLoader.html#Module-Index","page":"ScenarioLoader","title":"Module Index","text":"","category":"section"},{"location":"ScenarioLoader.html","page":"ScenarioLoader","title":"ScenarioLoader","text":"Modules = [ScenarioLoader]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"ScenarioLoader.html#Detailed-API","page":"ScenarioLoader","title":"Detailed API","text":"","category":"section"},{"location":"ScenarioLoader.html","page":"ScenarioLoader","title":"ScenarioLoader","text":"Modules = [ScenarioLoader]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"ScenarioLoader.html#GenFSM.ScenarioLoader.expand_dict-Tuple{AbstractDict}","page":"ScenarioLoader","title":"GenFSM.ScenarioLoader.expand_dict","text":"expand_dict(d::Dict)\n\nExpand dictionary keys that are tuples into nested dictionaries.\n\nExample\n\nd_input = Dict((\"a\",\"b\",\"c\") => 10, \"e\" => 30, (\"a\",\"b\",\"d\") => 20)\nd_output = expand_dict(d_input) # Dict(\"a\" => Dict(\"b\" => Dict(\"c\" => 10, \"d\" => 20)), \"e\" => 30)\n\n\n\n\n\n","category":"method"},{"location":"ScenarioLoader.html#GenFSM.ScenarioLoader.load_general_settings","page":"ScenarioLoader","title":"GenFSM.ScenarioLoader.load_general_settings","text":"load_general_settings(project=\"default\",scenario=\"default\")\n\nLoad the settings for a specific project and scenario. The settings are returned as a dictionary.\n\n\n\n\n\n","category":"function"},{"location":"ScenarioLoader.html#GenFSM.ScenarioLoader.override_nested_dict!-Tuple{AbstractDict, AbstractDict}","page":"ScenarioLoader","title":"GenFSM.ScenarioLoader.override_nested_dict!","text":"override_nested_dict!(d1::AbstractDict, d2::AbstractDict; strict::Bool=true, expand=true)\n\nOverride the values in the dictionary d1 with the values in the dictionary d2.\n\nd2 can be either another nested dictionary or a dictionary where the different levels are represented as tuple keys, e.g. d2 = Dict(\"a\"=>Dict(\"b\"=>1)) or d2 = Dict((\"a\",\"b\")=>1). If d2 has new keys and strict is enabled, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"ScenarioLoader.html#GenFSM.ScenarioLoader.recursive_replace!-Tuple{Any, Any}","page":"ScenarioLoader","title":"GenFSM.ScenarioLoader.recursive_replace!","text":"recursive_replace!(dict,replacement_pattern)\n\nReplace a pattern in the values a possibly nested dictionary\n\nd = Dict(\"a\" => Dict(1 => \"aaa\", 2 => \"bgggb\"), 3=>\"ccc\")\nrecursive_replace!(d,\"ggg\" => \"GGG\") # Dict(\"a\" => Dict(1 => \"aaa\", 2 => \"bGGGb\"), 3=>\"ccc\")\n\n\n\n\n\n","category":"method"},{"location":"Structure_of_model.html#Model-code-structure","page":"Model code structure","title":"Model code structure","text":"","category":"section"},{"location":"Structure_of_model.html","page":"Model code structure","title":"Model code structure","text":"The following is a simplification of how the model interact between the various module, including regional specific ones:","category":"page"},{"location":"Structure_of_model.html","page":"Model code structure","title":"Model code structure","text":"module GenFSM\n\nexport run_model\n\nmodule Res\n\nfunction init!!()\n    res_regions = [\"fr\",\"uk\"]\n    println(\"Res init..\")\n    for reg in res_regions   \n        init!!(Val(Symbol(reg)),1)\n    end\nend\n\nend # end module Res\n\nmodule Mkt\n\nfunction init!!()\n    mkt_regions = [\"fr\",\"de\"]\n    println(\"Mkt init..\")\n    for reg in mkt_regions   \n        init!!(Val(Symbol(reg)),1)\n    end\nend\n\nend # end module mkt\n\nmodule Res_fr\nimport ..GenFSM.Res\n\nfunction _init!!(x)\n    println(\"Res fr\")\nend\nfunction Res.init!!(::Val{:fr},x)\n    Res_fr._init!!(x)\nend\n\nend\n\nmodule Res_uk\nimport ..GenFSM.Res\n\nfunction _init!!(x)\n    println(\"Res uk\")\nend\nfunction Res.init!!(::Val{:uk},x)\n    Res_uk._init!!(x)\nend\n\nend\n\nmodule Mkt_fr\nimport ..GenFSM.Mkt\n\nfunction _init!!(x)\n    println(\"mkt fr\")\nend\nfunction Mkt.init!!(::Val{:fr},x)\n    Mkt_fr._init!!(x)\nend\n\nend\n\nmodule Mkt_de\nimport ..GenFSM.Mkt\n\nfunction _init!!(x)\n    println(\"mkt de\")\nend\nfunction Mkt.init!!(::Val{:de},x)\n    Mkt_de._init!!(x)\nend\n\nend # end Mkt_de\n\nfunction run_model()\n    Res.init!!()\n    Mkt.init!!()\nend\n\nend # end master module GenFSM\n\n\nGenFSM.run_model()","category":"page"},{"location":"Res.html#The-Res-Module-(Forest-Resources)","page":"Res","title":"The Res Module (Forest Resources)","text":"","category":"section"},{"location":"Res.html","page":"Res","title":"Res","text":"Res","category":"page"},{"location":"Res.html#GenFSM.Res","page":"Res","title":"GenFSM.Res","text":"module Res\n\nForest resources module of GenFSM\n\n\n\n\n\n","category":"module"},{"location":"Res.html#Module-Index","page":"Res","title":"Module Index","text":"","category":"section"},{"location":"Res.html","page":"Res","title":"Res","text":"Modules = [Res]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"Res.html#Detailed-API","page":"Res","title":"Detailed API","text":"","category":"section"},{"location":"Res.html","page":"Res","title":"Res","text":"Modules = [Res]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"Res.html#GenFSM.Res.Pixel","page":"Res","title":"GenFSM.Res.Pixel","text":"mutable struct Pixel\n\nPixel used in the Res module\n\nFields:\n\nid::Tuple{Int64, Int64}: A (x,y) tuple. Note that x is longitude and y is latitude (from top left)\nfvol::Matrix{Float64}: Forest volumes, Mm^3, by ft,dc\nfarea::Matrix{Float64}: Forest Area, ha, by ft,dc\nac::Vector{Float64}: Availability coefficient, ∈ [0,1] by ft\nfixed_state::Vector{Float64}: Fixed pixel characteristics\nEncoded characteristics of the pixel (soil, position, geomorphology...). These are assumed not to change in the timeframe of the simulation, even if we change FT that may have an effect on soil\n\nvar_state::Vector{Float64}: Time variable characteristics Encoded characteristics of the pixel that by scenario and/or time depends (climate...)\n\ninitialized::Bool: Initialized by at least one module TODO: maybe unneeded just set initialization_model to 0\n\ninitialization_model::Int64: Initialization model id. It defines the ML model for growth and mortality\n\n\n\n\n\n","category":"type"},{"location":"Res.html#GenFSM.Res.init!!-Tuple{Any, Any, Any}","page":"Res","title":"GenFSM.Res.init!!","text":"init!!(pixels, settings, raster_mask)\n\n\nDelegate pixel initialization to each Res region.\n\nRes.init!!() –> init!!(Val(regxx)),...) –> Resxx._init!!()\n\n\n\n\n\n","category":"method"},{"location":"Res.html#GenFSM.Res.load_settings!-Tuple{Any}","page":"Res","title":"GenFSM.Res.load_settings!","text":"load_settings!(settings)\n\nLoad the YAML file for the Res module and the YAML files for each RES region.\n\n\n\n\n\n","category":"method"},{"location":"Res.html#GenFSM.Res.make_pixels-NTuple{4, Any}","page":"Res","title":"GenFSM.Res.make_pixels","text":"make_pixels(nft,ndc,nx,ny)\n\nReturn an array of uninstantiated pixels.\n\nNote that we follow here the geo standard, so pixels[2,1] is pixel x=2 (from left), y=1 (from nord)\n\n\n\n\n\n","category":"method"},{"location":"index.html#GenFSM.jl","page":"Index","title":"GenFSM.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for GenFSM.jl","category":"page"}]
}
